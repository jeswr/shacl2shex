@prefix dash: <http://datashapes.org/dash#> .
@prefix ex: <http://example.com/ns#> .
@prefix mf: <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sht: <http://www.w3.org/ns/shacl-test#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ex:InvalidInstance
  rdf:type ex:TestClass ;
  rdfs:label "Invalid instance" ;
.
ex:TestClass
  rdf:type rdfs:Class ;
  rdf:type sh:NodeShape ;
  rdfs:label "Test class" ;
  rdfs:subClassOf rdfs:Resource ;
  # Only using an IRI Expression here because Core doesn't define interesting node expressions
  sh:nodeByExpression ex:TestNodeShape ;
.
ex:TestNodeShape
  rdf:type sh:NodeShape ;
  sh:class ex:OtherClass ;
.
ex:ValidInstance
  rdf:type ex:OtherClass ;
  rdf:type ex:TestClass ;
  rdfs:label "Valid instance" ;
.
<>
  rdf:type mf:Manifest ;
  mf:entries (
      <nodeByExpression-001>
    ) ;
.
<nodeByExpression-001>
  rdf:type sht:Validate ;
  rdfs:label "Test of sh:nodeByExpression at node shape 001" ;
  mf:action [
      sht:dataGraph <> ;
      sht:shapesGraph <> ;
    ] ;
  mf:result [
      rdf:type sh:ValidationReport ;
      sh:conforms "false"^^xsd:boolean ;
      sh:result [
          rdf:type sh:ValidationResult ;
          sh:focusNode ex:InvalidInstance ;
          sh:resultSeverity sh:Violation ;
          sh:sourceConstraint ex:TestNodeShape ;
          sh:sourceConstraintComponent sh:NodeByExpressionConstraintComponent ;
          sh:sourceShape ex:TestClass ;
          sh:value ex:InvalidInstance ;
        ] ;
    ] ;
  mf:status sht:approved ;
.
